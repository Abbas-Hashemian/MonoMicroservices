<Project>
	<!--We keep all repetitive References, PropertyGroups, AssemblyAttributes and any "Layer-based" repetitive elements here to avoid version conflicts-->

	<PropertyGroup>
		<Copyright>Copyright (c) 2023 Abbas Ali Hashemian</Copyright>
		<Authors>Abbas Ali Hashemian</Authors>
		<ProductName>MonoMicroservices template</ProductName>
		<ProductVersion>0.1.0.0</ProductVersion>
		<Version>0.1.0.0</Version>
		<!--Caution! SolutionName vs MySolutionName is the real name of solution and not mutable-->
		<MySolutionName Condition="'$(MySolutionName)' == ''">MonoMicroservices</MySolutionName>
		<LibraryPath Condition="'$(LibraryPath)' == ''">..\..\Library\Library</LibraryPath>

		<AssemblyName>$(MySolutionName).$(MSBuildProjectName)</AssemblyName>
		<RootNamespace>$(MySolutionName).$(MSBuildProjectName.Replace(" ", "_"))</RootNamespace>

		<TargetFramework>net6.0</TargetFramework>
		<!--<ExcludeRestorePackageImports>true</ExcludeRestorePackageImports> for targets files (excessive runtimes folder in Output folder)-->
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<UseAppHost>false</UseAppHost>
		<!--Prevent exe linking-->
		<!--incorrect warning for not-null string class props without default value-->
		<NoWarn>8618</NoWarn>
		<NoWarn Condition="'$(MyProjectType)' == 'NUnitTest' Or '$(MyProjectType)' == 'XUnitTest'">8600,8601,8618,8602,8604,8605,8625</NoWarn>
		<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
		<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
		<ProductOutputPath Condition="'$(ProductOutputPath)' == ''">..\..\output</ProductOutputPath>
		<OutputPath Condition="'$(MyProjectType)' != 'NUnitTest' And '$(MyProjectType)' != 'XUnitTest'">$(ProductOutputPath)</OutputPath>
		<!--<PackageOutputPath Condition="'$(MyProjectType)' != 'NUnitTest' And '$(MyProjectType)' != 'XUnitTest'">..\Packages</PackageOutputPath>-->
		<!--<OutputPath Condition="!$(MSBuildProjectName.Contains('Tests'))">..\..\Output</OutputPath>-->
		<!--<Platform>AnyCpu</Platform>-->
		<Platform>x64</Platform>
		<!--<PlatformTarget>x64</PlatformTarget>-->
		<UserSecretsId>387840e3-9530-44f1-a280-f7b2ac177b83</UserSecretsId>
	</PropertyGroup>

	<!--All non-Library projects-->
	<ItemGroup Condition="'$(MyProjectType)' != 'Library'">
		<ProjectReference Include="$(LibraryPath)\Library.csproj"/>
		<!--<Reference Include="$(MySolutionName).Library" Version="0.1.0.0" Condition="'$(IsInMicroservicesMode)' == 'true'">
			<HintPath>$(ProductOutputPath)\$(MySolutionName).Library.dll</HintPath>
		</Reference>-->
		<!--<PackageReference Include="$(MySolutionName).Library" Version="1.0.0" />-->
	</ItemGroup>

	<!--Library shared references with other projects (To avoid version conflicts)-->
	<!--Identity-->
	<ItemGroup Condition="'$(ProjectDomainName)' == 'Library' Or ('$(ProjectDomainName)' == 'User' And '$(MyProjectType)' == 'Domain')">
		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.16" />
		<PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="6.0.16" />
	</ItemGroup>
	<!--Configurations-->
	<ItemGroup Condition="'$(ProjectDomainName)' == 'Library' Or '$(ProjectDomainName)' == 'TestUtils'">
		<PackageReference Include="Microsoft.Extensions.Configuration.FileExtensions" Version="6.0.0" />
		<PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="6.0.0" />
		<PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.0" />
	</ItemGroup>
	<!--DryIoC-->
	<ItemGroup Condition="'$(ProjectDomainName)' == 'Library' Or '$(MyProjectType)' == 'NUnitTest' Or '$(MyProjectType)' == 'DataAccess' Or '$(MyProjectType)' == 'UI' Or '$(MyProjectType)' == 'WebAPI'">
		<!--DryIoC needs the Abstractions version 7-->
		<PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="7.0.0" />
		<Reference Include="DryIoc">
			<HintPath>$(LibraryPath)\ThirdParties\DryIoc.dll</HintPath>
		</Reference>
		<Reference Include="DryIoc.Microsoft.DependencyInjection">
			<HintPath>$(LibraryPath)\ThirdParties\DryIoc.Microsoft.DependencyInjection.dll</HintPath>
		</Reference>
	  <!--<PackageReference Include="DryIoc" Version="5.4.0" />
	  <PackageReference Include="DryIoc.Microsoft.DependencyInjection" Version="6.2.0" />-->
	</ItemGroup>
	<!--DryIoC Mef-->
	<ItemGroup Condition="'$(ProjectDomainName)' == 'Library' Or '$(MyProjectType)' == 'NUnitTest'">
	  <!--<PackageReference Include="System.ComponentModel.Composition" Version="7.0.0" />
	  <PackageReference Include="DryIoc.MefAttributedModel" Version="7.0.1" />
	  <PackageReference Include="DryIocAttributes" Version="7.0.0" />-->
		<Reference Include="System.ComponentModel.Composition">
			<HintPath>$(LibraryPath)\ThirdParties\System.ComponentModel.Composition.dll</HintPath>
		</Reference>
		<Reference Include="DryIoc.MefAttributedModel">
			<HintPath>$(LibraryPath)\ThirdParties\DryIoc.MefAttributedModel.dll</HintPath>
		</Reference>
		<Reference Include="DryIocAttributes">
			<HintPath>$(LibraryPath)\ThirdParties\DryIocAttributes.dll</HintPath>
		</Reference>
	</ItemGroup>
	<!--<PackageReference Include="DryIoc.Web" Version="5.0.0" />-->



	<!--Domain projects-->
	<ItemGroup Condition="'$(MyProjectType)' == 'Domain'">
		<!-- Why internals in Domain? Because of PublishedServices -->
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).Library</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).$(ProjectDomainName)DataAccess</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).$(ProjectDomainName)Service</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).$(ProjectDomainName)ServiceTests</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!--DataAccess projects-->
	<ItemGroup Condition="'$(MyProjectType)' == 'DataAccess'">
		<!--[Export],[Import]-->
	  <!--<PackageReference Include="System.ComponentModel.Composition" Version="7.0.0" />-->
		<Reference Include="System.ComponentModel.Composition">
			<HintPath>$(LibraryPath)\ThirdParties\System.ComponentModel.Composition.dll</HintPath>
		</Reference>
		<!--[ExportEx],[ExportMany]-->
	  <!--<PackageReference Include="DryIocAttributes" Version="7.0.0" />-->
		<Reference Include="DryIocAttributes">
			<HintPath>$(LibraryPath)\ThirdParties\DryIocAttributes.dll</HintPath>
		</Reference>
		<PackageReference Include="Microsoft.EntityFrameworkCore" Version="6.0.16" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="6.0.16">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="6.0.16" />
		<PackageReference Include="Microsoft.Extensions.Configuration.FileExtensions" Version="6.0.0" />
		<PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="6.0.0" />

		<ProjectReference Include="..\$(ProjectDomainName)Domain\$(ProjectDomainName)Domain.csproj" />

		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).Library</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!--Service projects-->
	<ItemGroup Condition="'$(MyProjectType)' == 'Service'">
		<!--[Export],[Import]-->
	  <!--<PackageReference Include="System.ComponentModel.Composition" Version="7.0.0" />-->
		<Reference Include="System.ComponentModel.Composition">
			<HintPath>$(LibraryPath)\ThirdParties\System.ComponentModel.Composition.dll</HintPath>
		</Reference>
		<!--[ExportEx],[ExportMany]-->
	  <!--<PackageReference Include="DryIocAttributes" Version="7.0.0" />-->
		<Reference Include="DryIocAttributes">
			<HintPath>$(LibraryPath)\ThirdParties\DryIocAttributes.dll</HintPath>
		</Reference>

		<ProjectReference Include="..\$(ProjectDomainName)Domain\$(ProjectDomainName)Domain.csproj" />

		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(MySolutionName).Library</_Parameter1>
		</AssemblyAttribute>
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>$(AssemblyName)Tests</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>

	<!--WebAPI projects-->
	<PropertyGroup Condition="'$(MyProjectType)' == 'WebAPI'">
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
	</PropertyGroup>
	<ItemGroup Condition="'$(MyProjectType)' == 'WebAPI'">
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.0" />
		<!--<PackageReference Include="Microsoft.VisualStudio.Interop" Version="17.6.36389" />-->
		<PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.3" />

		<ProjectReference Include="..\$(ProjectDomainName)Domain\$(ProjectDomainName)Domain.csproj" />
	</ItemGroup>

	

	<!--NUnitTest and XUnitTest projects props-->
	<ItemGroup Condition="'$(MyProjectType)' != 'NUnitTest' And '$(MyProjectType)' != 'XUnitTest'">
		<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
			<_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
		</AssemblyAttribute>
	</ItemGroup>
	<PropertyGroup Condition="'$(MyProjectType)' == 'NUnitTest' Or '$(MyProjectType)' == 'XUnitTest'">
		<IsPackable>false</IsPackable>
	</PropertyGroup>
	<!--NUnitTest projects refs-->
	<ItemGroup Condition="'$(MyProjectType)' == 'NUnitTest'">
		<PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
		<PackageReference Include="NUnit" Version="3.13.3" />
		<PackageReference Include="NUnit3TestAdapter" Version="4.4.2" />
		<PackageReference Include="Moq" Version="4.18.4" />
		<!--<PackageReference Update="coverlet.collector" Version="3.2.0">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Update="Microsoft.NET.Test.Sdk" Version="17.5.0" />
		<PackageReference Update="NUnit.Analyzers" Version="3.6.1">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>-->

		<ProjectReference Condition="'$(ProjectDomainName)' != 'Library' And '$(ProjectDomainName)' != 'TestUtils'" Include="..\$(ProjectDomainName)Domain\$(ProjectDomainName)Domain.csproj" />
		<ProjectReference Condition="'$(ProjectDomainName)' != 'Library' And '$(ProjectDomainName)' != 'TestUtils'" Include="..\$(ProjectDomainName)Service\$(ProjectDomainName)Service.csproj" />

		<ProjectReference Condition="'$(ProjectDomainName)' != 'TestUtils'" Include="..\..\Library\TestUtils\TestUtils.csproj" />
	</ItemGroup>

	<!--XUnitTest projects refs-->
	<!--<ItemGroup Condition="'$(MyProjectType)' == 'XUnitTest'">
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="xunit" Version="2.4.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.5">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="coverlet.collector" Version="3.2.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>

		<ProjectReference Condition="'$(ProjectDomainName)' != 'Library'" Include="..\$(ProjectDomainName)Domain\$(ProjectDomainName)Domain.csproj" />
		<ProjectReference Condition="'$(ProjectDomainName)' != 'Library'" Include="..\$(ProjectDomainName)Service\$(ProjectDomainName)Service.csproj" />
	</ItemGroup>-->

</Project>
